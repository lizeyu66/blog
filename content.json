{"meta":{"title":"lzy","subtitle":"","description":"","author":"lizeyu","url":"https://lizeyu66.github.io","root":"/lizeyu66.github.io/"},"pages":[{"title":"test-page","date":"2020-07-31T01:54:06.000Z","updated":"2020-07-31T03:29:08.806Z","comments":true,"path":"test-page/index.html","permalink":"https://lizeyu66.github.io/test-page/index.html","excerpt":"","text":""}],"posts":[{"title":"hello-text","slug":"hello-text","date":"2020-07-31T08:15:48.000Z","updated":"2020-07-31T08:15:48.030Z","comments":true,"path":"2020/07/31/hello-text/","link":"","permalink":"https://lizeyu66.github.io/2020/07/31/hello-text/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"indexedDB使用方法","slug":"about","date":"2020-07-31T03:29:08.804Z","updated":"2020-08-12T07:33:43.225Z","comments":true,"path":"2020/07/31/about/","link":"","permalink":"https://lizeyu66.github.io/2020/07/31/about/","excerpt":"","text":"打开数据库/新建数据库indexedDB.open(dbName, version) 参数1：数据库名称（如果数据库不存在，则会新建） 参数2: 数据库版本（若省略，则默认为当前版本，新建数据库时，默认为1） 123456789let routerDBRequest &#x3D; window.indexedDB.open([dataBaseName])&lt;!-- error 表示数据库打开失败 --&gt;routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开失败&#39;)&#125;&lt;!-- success 表示数据库打开成功 --&gt;routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开成功&#39;)&#125; 读取数据objectStore.get(primaryKey) 参数：主键的值 1234567891011121314let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; db &#x3D; event.target.result let trans &#x3D; db.transaction([&#39;allRouteData&#39;]) let objectStores &#x3D; trans.objectStore(&#39;allRouteData&#39;) let request &#x3D; objectStores.get(1) request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; if(event.target.result) &#123; &#125; const newRoute &#x3D; [] newRoute.push(event.target.result) &#125;&#125; test123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)&lt;!-- error 表示数据库打开失败 --&gt;routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开失败&#39;) console.log(event)&#125;&lt;!-- success 表示数据库打开成功 --&gt;routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开成功&#39;) &lt;!-- 读取单条数据 --&gt; db &#x3D; event.target.result let trans &#x3D; db.transaction([&#39;allRouteData&#39;]) let objectStores &#x3D; trans.objectStore(&#39;allRouteData&#39;) let request &#x3D; objectStores.get(1) &#x2F;&#x2F; get参数为主键的值 request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; const newRoute &#x3D; [] newRoute.push(event.target.result) store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute) router.push(&#123; path: newRoute[0].path &#125;) &#125; &lt;!-- 批量读取数据 --&gt; objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123; let res &#x3D; event.target.result if(res) &#123; let val &#x3D; res.value newRoute.push(val) store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute) router.push(&#123; path: newRoute[0].path &#125;) res.continue() &#125; else &#123; console.log(&#39;完成索引&#39;) &#125; &#125; &lt;!-- 修改数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;) const newRoute &#x3D; [] objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123; name: &#39;首页&#39;, path: &#39;dashboard&#39;, component: &#39;Dashboard&#39;, id: 2, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39; &#125;]&#125;) &lt;!-- 删除数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1) request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;数据删除成功&#39;) &#125;&#125;&#125;&lt;!-- upgradeneeded 数据库升级事件（指定版本大于数据库实际版本时触发） --&gt;routerDBRequest.onupgradeneeded &#x3D; (event) &#x3D;&gt; &#123; let db &#x3D; event.target.result &lt;!-- 创建数据仓库&#x2F;新建表 --&gt; &lt;!-- allRouteData为表名,keyPath为主键,使用autoIncrement可以自动生成主键 --&gt; if(!db.objectStoreNames.contains(&quot;allRouteData&quot;)) &#123; let allRoute &#x3D; this.db.createObjectStore(&quot;allRouteData&quot;, &#123; keyPath: &#39;id&#39;&#125;) &lt;!-- IDBObject.createIndex()是新建索引的方法， 三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值） --&gt; allRoute.createIndex(&#39;id&#39;, &#39;id&#39;, &#123; unique: true &#125;) allRoute.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;path&#39;, &#39;path&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;component&#39;, &#39;component&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;hiddenInMenu&#39;, &#39;hiddenInMenu&#39;, &#123; unique: false&#125;) allRoute.createIndex(&#39;redirect&#39;, &#39;redirect&#39;, &#123;unique: false&#125;) allRoute.createIndex(&#39;meta&#39;, &#39;meta&#39;, &#123; unique: false&#125;) &#125; &lt;!-- 写入数据 --&gt; var objectStore &#x3D; transaction.objectStore(&quot;allRouteData&quot;) let addReq &#x3D; objectStore.add($&#123;data&#125;) addReq.onsuccess &#x3D; (event)&#x3D;&gt; &#123; console.log(&#39;数据写入成功&#39;) &#125; addReq.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;数据写入失败&#39;) &#125; &lt;!-- 利用索引检索数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;) let index &#x3D; objectStores.index(&quot;name&quot;) index.get(&#39;首页&#39;).onsuccess &#x3D; (event)&#x3D;&gt; &#123; console.log(event.target.result) &#125;","categories":[],"tags":[]},{"title":"post title with whitespace","slug":"post-title-with-whitespace","date":"2020-07-31T01:50:54.000Z","updated":"2020-07-31T06:06:50.653Z","comments":true,"path":"2020/07/31/post-title-with-whitespace/","link":"","permalink":"https://lizeyu66.github.io/2020/07/31/post-title-with-whitespace/","excerpt":"","text":"","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://lizeyu66.github.io/tags/test/"}]}],"categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://lizeyu66.github.io/tags/test/"}]}