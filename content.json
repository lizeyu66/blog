{"meta":{"title":"lzy","subtitle":"","description":"","author":"lizeyu","url":"https://lizeyu66.github.io","root":"/lizeyu66.github.io/"},"pages":[{"title":"about","date":"2021-03-19T02:12:22.000Z","updated":"2021-03-19T02:12:22.807Z","comments":true,"path":"about/index.html","permalink":"https://lizeyu66.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-03-19T02:11:34.000Z","updated":"2021-03-19T02:13:01.681Z","comments":true,"path":"categories/index.html","permalink":"https://lizeyu66.github.io/categories/index.html","excerpt":"","text":"目录"},{"title":"more","date":"2021-03-19T02:12:42.000Z","updated":"2021-03-19T02:12:42.988Z","comments":true,"path":"more/index.html","permalink":"https://lizeyu66.github.io/more/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-03-19T02:11:56.000Z","updated":"2021-03-19T02:11:56.307Z","comments":true,"path":"tags/index.html","permalink":"https://lizeyu66.github.io/tags/index.html","excerpt":"","text":""},{"title":"test-page","date":"2020-07-31T01:54:06.000Z","updated":"2021-03-17T07:15:39.384Z","comments":true,"path":"test-page/index.html","permalink":"https://lizeyu66.github.io/test-page/index.html","excerpt":"","text":""}],"posts":[{"title":"indexedDB使用方法","slug":"indexDB","date":"2020-07-31T03:29:08.804Z","updated":"2021-03-19T02:07:44.795Z","comments":true,"path":"2020/07/31/indexDB/","link":"","permalink":"https://lizeyu66.github.io/2020/07/31/indexDB/","excerpt":"","text":"打开数据库/新建数据库indexedDB.open(dbName, version) 参数1：数据库名称（如果数据库不存在，则会新建） 参数2: 数据库版本（若省略，则默认为当前版本，新建数据库时，默认为1） 123456789let routerDBRequest &#x3D; window.indexedDB.open([dataBaseName])&lt;!-- error 表示数据库打开失败 --&gt;routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开失败&#39;)&#125;&lt;!-- success 表示数据库打开成功 --&gt;routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开成功&#39;)&#125; 读取数据objectStore.get(primaryKey) 参数：主键的值 1234567891011121314let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; db &#x3D; event.target.result let trans &#x3D; db.transaction([&#39;allRouteData&#39;]) let objectStores &#x3D; trans.objectStore(&#39;allRouteData&#39;) let request &#x3D; objectStores.get(1) request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; if(event.target.result) &#123; &#125; const newRoute &#x3D; [] newRoute.push(event.target.result) &#125;&#125; test123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)&lt;!-- error 表示数据库打开失败 --&gt;routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开失败&#39;) console.log(event)&#125;&lt;!-- success 表示数据库打开成功 --&gt;routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;打开成功&#39;) &lt;!-- 读取单条数据 --&gt; db &#x3D; event.target.result let trans &#x3D; db.transaction([&#39;allRouteData&#39;]) let objectStores &#x3D; trans.objectStore(&#39;allRouteData&#39;) let request &#x3D; objectStores.get(1) &#x2F;&#x2F; get参数为主键的值 request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; const newRoute &#x3D; [] newRoute.push(event.target.result) store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute) router.push(&#123; path: newRoute[0].path &#125;) &#125; &lt;!-- 批量读取数据 --&gt; objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123; let res &#x3D; event.target.result if(res) &#123; let val &#x3D; res.value newRoute.push(val) store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute) router.push(&#123; path: newRoute[0].path &#125;) res.continue() &#125; else &#123; console.log(&#39;完成索引&#39;) &#125; &#125; &lt;!-- 修改数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;) const newRoute &#x3D; [] objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123; name: &#39;首页&#39;, path: &#39;dashboard&#39;, component: &#39;Dashboard&#39;, id: 2, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39; &#125;]&#125;) &lt;!-- 删除数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1) request.onsuccess &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;数据删除成功&#39;) &#125;&#125;&#125;&lt;!-- upgradeneeded 数据库升级事件（指定版本大于数据库实际版本时触发） --&gt;routerDBRequest.onupgradeneeded &#x3D; (event) &#x3D;&gt; &#123; let db &#x3D; event.target.result &lt;!-- 创建数据仓库&#x2F;新建表 --&gt; &lt;!-- allRouteData为表名,keyPath为主键,使用autoIncrement可以自动生成主键 --&gt; if(!db.objectStoreNames.contains(&quot;allRouteData&quot;)) &#123; let allRoute &#x3D; this.db.createObjectStore(&quot;allRouteData&quot;, &#123; keyPath: &#39;id&#39;&#125;) &lt;!-- IDBObject.createIndex()是新建索引的方法， 三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值） --&gt; allRoute.createIndex(&#39;id&#39;, &#39;id&#39;, &#123; unique: true &#125;) allRoute.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;path&#39;, &#39;path&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;component&#39;, &#39;component&#39;, &#123; unique: false &#125;) allRoute.createIndex(&#39;hiddenInMenu&#39;, &#39;hiddenInMenu&#39;, &#123; unique: false&#125;) allRoute.createIndex(&#39;redirect&#39;, &#39;redirect&#39;, &#123;unique: false&#125;) allRoute.createIndex(&#39;meta&#39;, &#39;meta&#39;, &#123; unique: false&#125;) &#125; &lt;!-- 写入数据 --&gt; var objectStore &#x3D; transaction.objectStore(&quot;allRouteData&quot;) let addReq &#x3D; objectStore.add($&#123;data&#125;) addReq.onsuccess &#x3D; (event)&#x3D;&gt; &#123; console.log(&#39;数据写入成功&#39;) &#125; addReq.onerror &#x3D; (event) &#x3D;&gt; &#123; console.log(&#39;数据写入失败&#39;) &#125; &lt;!-- 利用索引检索数据 --&gt; let objectStores &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;) let index &#x3D; objectStores.index(&quot;name&quot;) index.get(&#39;首页&#39;).onsuccess &#x3D; (event)&#x3D;&gt; &#123; console.log(event.target.result) &#125;","categories":[],"tags":[]},{"title":"JS事件执行机制","slug":"JsBusEvents/JsBusEvents","date":"2020-03-04T08:15:48.000Z","updated":"2021-03-17T08:44:50.779Z","comments":true,"path":"2020/03/04/JsBusEvents/JsBusEvents/","link":"","permalink":"https://lizeyu66.github.io/2020/03/04/JsBusEvents/JsBusEvents/","excerpt":"","text":"概述先同步后异步遇到new Promise先执行先微任务后宏任务 宏任务与微任务macro-task(宏任务)：包括整体代码script，setTimeout，setInterval, setImmediate（浏览器暂时不支持，只有IE10支持，具体可见MDN）、I/O、UI Rendering。micro-task(微任务)：Promise.then，process.nextTick 总结 一般的JavaScript代码（同步）的属于宏任务，定时器相关的异步代码，包括setTimeOut、setInterval等也属于宏任务，promise.then、 process.nextTick属于微任务； 同步的代码会按照执行顺序顺序执行，遇到异步代码的时候，属于宏任务的放到宏队列，微任务放到微队列，其中promise需要resolve或者reject才会执行then或者catch里面的内容，其他的放到队列的属于回调函数的内容。 执行顺序是宏任务-微任务-宏任务……，因为整个脚本就是一个宏任务，所以当里面宏任务和微任务同时放入队列，会先执行玩微任务再执行宏任务；前提是代码执行完毕，如果存在嵌套关系，则会先执行完该任务再执行下一个任务，如果问题复杂建议通过画图来理清楚 process.nextTick只能在node环境下运行 async await 与 Promise async声明的必须是一个function，并且必须紧跟着function async function process() {} await必须在async声明的函数内部使用，必须是直系 async生命的函数本质上是一个Promise 12345678910111213141516171819&#x2F;&#x2F; 以下三个函数表达的意思一致const demo &#x3D;(async function() &#123; return &#39;我是promise&#39; &#125;) () const demo &#x3D; (async function() &#123; return Promise.resolve(&#39;我是promise&#39;) &#125;)()const demo &#x3D;（async function() &#123; return new Promise((resolve,reject) &#x3D;&gt; &#123; resolve(&#39;我是promise&#39;) &#125;)&#125;)()&#x2F;&#x2F; 获取返回值的方法demo.then(res &#x3D;&gt; &#123; console.log(res) &#125;) await的本质是提供等同于“同步效果”的等待异步返回能力的语法糖，实质上就是返回一个Promise await意为等一会，只要await生命的函数还没有返回，下面的内容就不会被执行，准确的说是用await声明的Promise异步返回，必须等待到有返回值之后，才继续执行以后的代码 async/await的错误处理 async/await的终止程序（中断） Promise本身是无法终止的，只是一个状态机，包含三种状态pending（挂起）、resolve（成功）、reject（拒绝），一旦发出请求必须结束，无法取消，想要中断的时候直接return 一个值即可，return之后的操作将都会停止","categories":[],"tags":[]}],"categories":[],"tags":[]}