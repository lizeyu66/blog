<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js事件执行机制（EventLoop）</title>
      <link href="/lizeyu66.github.io/2021/03/23/jsEventLoop/"/>
      <url>/lizeyu66.github.io/2021/03/23/jsEventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>javascript是一门单线程语言，js任务是一个一个顺序执行，分为同步任务和异步任务，同步任务会进入主线程，异步任务会进入Event Table（事件表），当时间表中的异步任务完成后就会在Event Queue（事件队列）中注册回调函数，主线程任务全部完成后，才会执行Event Queue中的回调，js解析器会不断重复检查主线程执行栈是否为空，然后重复第3步，这就是Event Loop（事件循环）</p><p><img src="EventLoop.png" alt="123"></p><p><strong>简单来说就是：</strong><br>  先同步后异步<br>  遇到new Promise先执行<br>  先微任务后宏任务</p><h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval, setImmediate（浏览器暂时不支持，只有IE10支持，具体可见MDN）、I/O、UI Rendering。<br>micro-task(微任务)：Promise.then，process.nextTick</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>一般的JavaScript代码（同步）的属于宏任务，定时器相关的异步代码，包括setTimeOut、setInterval等也属于宏任务，promise.then、 process.nextTick属于微任务；</li><li>同步的代码会按照执行顺序顺序执行，遇到异步代码的时候，属于宏任务的放到宏队列，微任务放到微队列，其中promise需要resolve或者reject才会执行then或者catch里面的内容，其他的放到队列的属于回调函数的内容。</li><li>执行顺序是宏任务-微任务-宏任务……，因为整个脚本就是一个宏任务，所以当里面宏任务和微任务同时放入队列，会先执行玩微任务再执行宏任务；前提是代码执行完毕，如果存在嵌套关系，则会先执行完该任务再执行下一个任务，如果问题复杂建议通过画图来理清楚</li><li>process.nextTick只能在node环境下运行</li></ol><h2 id="async-await-与-Promise"><a href="#async-await-与-Promise" class="headerlink" title="async await 与 Promise"></a>async await 与 Promise</h2><ol><li>async声明的必须是一个function，并且必须紧跟着function </li></ol><p>async function process() {<br>}</p><ol start="2"><li>await必须在async声明的函数内部使用，必须是直系</li><li>async生命的函数本质上是一个Promise</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下三个函数表达的意思一致</span><br><span class="line">const demo &#x3D;(async function() &#123;                                              </span><br><span class="line">  return &#39;我是promise&#39;                  </span><br><span class="line">&#125;) ()                                                                                           </span><br><span class="line"></span><br><span class="line">const demo &#x3D; (async function() &#123;</span><br><span class="line">  return Promise.resolve(&#39;我是promise&#39;)   </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">const demo &#x3D;（async function() &#123;</span><br><span class="line">  return new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;我是promise&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br><span class="line">&#x2F;&#x2F; 获取返回值的方法</span><br><span class="line">demo.then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>await的本质是提供等同于“同步效果”的等待异步返回能力的语法糖，实质上就是返回一个Promise</li><li>await意为等一会，只要await生命的函数还没有返回，下面的内容就不会被执行，准确的说是用await声明的Promise异步返回，必须等待到有返回值之后，才继续执行以后的代码</li></ol><p><img src="async1.png"></p><ol><li>async/await的错误处理</li></ol><p><img src="async2.png"><br><img src="async3.png"></p><ol><li>async/await的终止程序（中断）  </li></ol><p><img src="async4.png"></p><ul><li>Promise本身是无法终止的，只是一个状态机，包含三种状态pending（挂起）、resolve（成功）、reject（拒绝），一旦发出请求必须结束，无法取消，想要中断的时候直接return 一个值即可，return之后的操作将都会停止</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>indexedDB使用方法</title>
      <link href="/lizeyu66.github.io/2020/03/23/indexedDB/"/>
      <url>/lizeyu66.github.io/2020/03/23/indexedDB/</url>
      
        <content type="html"><![CDATA[<h2 id="使用IndexedDB的原因"><a href="#使用IndexedDB的原因" class="headerlink" title="使用IndexedDB的原因"></a>使用IndexedDB的原因</h2><p>提到为什么要用IndexedDB就不得不提到我们经常用的缓存API localStorage和sessionStorage，这两个缓存API能满足我们开发时的绝大多数需求，简单的键值存储，但是它们有它们的限制：</p><p>存储空间限制，只有5M<br>只能存储字符串，存储对象类型的数据要用JSON.stringify和parse两个方法转换<br>存储的字段一多就很难管理，存储的字段也无法产生关联<br>IndexedDB的存储空间是没有限制，但是不同浏览器可能会对IndexedDB中单个库的大小进行一定的限制，IndexedDB本质上还是一个数据库，可以存储大量结构化数据（包括文件/blobs）, 同时IndexedDB API通过索引的方式实现了数据的高性能搜索</p><h2 id="打开数据库-新建数据库"><a href="#打开数据库-新建数据库" class="headerlink" title="打开数据库/新建数据库"></a>打开数据库/新建数据库</h2><p><strong>indexedDB.open(dbName, version)</strong></p><ul><li>参数1：数据库名称（如果数据库不存在，则会新建）</li><li>参数2: 数据库版本（若省略，则默认为当前版本，新建数据库时，默认为1）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open([dataBaseName])</span><br><span class="line">&lt;!-- error 表示数据库打开失败 --&gt;</span><br><span class="line">routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开失败&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- success 表示数据库打开成功 --&gt;</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded --&gt;</span><br><span class="line">request.onupgradeneeded &#x3D; function (event) &#123;</span><br><span class="line">  db &#x3D; event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p><strong>objectStore.get(primaryKey)</strong></p><ul><li>参数：主键的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    db &#x3D; event.target.result</span><br><span class="line">    let trans &#x3D; db.transaction([&#39;allRouteData&#39;])</span><br><span class="line">    let objectStores  &#x3D; trans.objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let request &#x3D; objectStores.get(1)</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">      if(event.target.result) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">        const newRoute &#x3D; []</span><br><span class="line">        newRoute.push(event.target.result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量读取数据"><a href="#批量读取数据" class="headerlink" title="批量读取数据"></a>批量读取数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    let res &#x3D; event.target.result</span><br><span class="line">    if(res) &#123;</span><br><span class="line">        let val &#x3D; res.value</span><br><span class="line">        newRoute.push(val)</span><br><span class="line">        store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">        router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">        res.continue()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#39;完成索引&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p><strong>objectStore.put(item)</strong></p><ul><li>参数：一列数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">const newRoute &#x3D; []</span><br><span class="line">objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123;</span><br><span class="line">    name: &#39;首页&#39;,</span><br><span class="line">    path: &#39;dashboard&#39;,</span><br><span class="line">    component: &#39;Dashboard&#39;,</span><br><span class="line">    id: 2,</span><br><span class="line">    meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p><strong>objectStore.del(num)</strong></p><ul><li>参数：删除的条数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1)</span><br><span class="line">request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据删除成功&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><p><strong>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objectStore.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;)</span><br></pre></td></tr></table></figure><h2 id="完整测试案例"><a href="#完整测试案例" class="headerlink" title="完整测试案例"></a>完整测试案例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)</span><br><span class="line">&lt;!-- error 表示数据库打开失败 --&gt;</span><br><span class="line">routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开失败&#39;)</span><br><span class="line">    console.log(event)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- success 表示数据库打开成功 --&gt;</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开成功&#39;)</span><br><span class="line">    &lt;!-- 读取单条数据 --&gt;</span><br><span class="line">    db &#x3D; event.target.result</span><br><span class="line">    let trans &#x3D; db.transaction([&#39;allRouteData&#39;])</span><br><span class="line">    let objectStores  &#x3D; trans.objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let request &#x3D; objectStores.get(1)  &#x2F;&#x2F; get参数为主键的值</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        const newRoute &#x3D; []</span><br><span class="line">        newRoute.push(event.target.result)</span><br><span class="line">        store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">        router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 批量读取数据 --&gt;</span><br><span class="line">    objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        let res &#x3D; event.target.result</span><br><span class="line">        if(res) &#123;</span><br><span class="line">            let val &#x3D; res.value</span><br><span class="line">            newRoute.push(val)</span><br><span class="line">            store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">            router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">            res.continue()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#39;完成索引&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    const newRoute &#x3D; []</span><br><span class="line">    objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123;</span><br><span class="line">    name: &#39;首页&#39;,</span><br><span class="line">    path: &#39;dashboard&#39;,</span><br><span class="line">    component: &#39;Dashboard&#39;,</span><br><span class="line">    id: 2,</span><br><span class="line">    meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;</span><br><span class="line">    &#125;]&#125;)</span><br><span class="line"></span><br><span class="line">    &lt;!-- 删除数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1)</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;数据删除成功&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- upgradeneeded  数据库升级事件（指定版本大于数据库实际版本时触发） --&gt;</span><br><span class="line">routerDBRequest.onupgradeneeded &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    let db &#x3D; event.target.result</span><br><span class="line"></span><br><span class="line">    &lt;!-- 创建数据仓库&#x2F;新建表 --&gt;</span><br><span class="line">    &lt;!-- allRouteData为表名,keyPath为主键,使用autoIncrement可以自动生成主键 --&gt;</span><br><span class="line">    if(!db.objectStoreNames.contains(&quot;allRouteData&quot;)) &#123;</span><br><span class="line">        let allRoute &#x3D; this.db.createObjectStore(&quot;allRouteData&quot;, &#123; keyPath: &#39;id&#39;&#125;)</span><br><span class="line">        &lt;!-- IDBObject.createIndex()是新建索引的方法， 三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值） --&gt;</span><br><span class="line">        allRoute.createIndex(&#39;id&#39;, &#39;id&#39;, &#123; unique: true &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;path&#39;, &#39;path&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;component&#39;, &#39;component&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;hiddenInMenu&#39;, &#39;hiddenInMenu&#39;, &#123; unique: false&#125;)</span><br><span class="line">        allRoute.createIndex(&#39;redirect&#39;, &#39;redirect&#39;, &#123;unique: false&#125;)</span><br><span class="line">        allRoute.createIndex(&#39;meta&#39;, &#39;meta&#39;, &#123; unique: false&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 写入数据 --&gt;</span><br><span class="line">    var objectStore &#x3D; transaction.objectStore(&quot;allRouteData&quot;)</span><br><span class="line">    let addReq &#x3D; objectStore.add($&#123;data&#125;)</span><br><span class="line">    addReq.onsuccess &#x3D; (event)&#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据写入成功&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    addReq.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据写入失败&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 利用索引检索数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let index &#x3D; objectStores.index(&quot;name&quot;)</span><br><span class="line">    index.get(&#39;首页&#39;).onsuccess &#x3D; (event)&#x3D;&gt; &#123;</span><br><span class="line">    console.log(event.target.result)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
