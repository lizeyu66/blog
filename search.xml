<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vueReview</title>
      <link href="/blog/2021/05/19/vueReview/"/>
      <url>/blog/2021/05/19/vueReview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webInterview</title>
      <link href="/blog/2021/03/31/webInterview/"/>
      <url>/blog/2021/03/31/webInterview/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><p>js数据类型以及如何判断数据类型</p><p> 基本数据类型： string number boolean null undefined symbol<br> 引用数据类型：object<br> 判断数据类型常用的是typeof、instanceof(可以准确的判断对象的类型)</p></li><li><p>作用域和作用域链</p><p> 含义：定义变量的区域，有一套访问变量的规则，根据这规则来管理浏览器引擎如何在当前作用域和嵌套作用域根据变量进行变量查找<br> 作用域的分类：全局作用域、函数作用域、块作用域<br> 作用域链： 当js使用一个变量的时候，会先在当前作用域寻找该变量，如何当前作用域找不到，则回到上一级作用域去寻找，以此类推知道找到该变量</p></li><li><p>this</p><blockquote><p>在全局范围内, this指向的是window<br>函数中this指的是调用他的那个对象（箭头函数特殊）<br>构造函数中，this指向的是new出来的新对象<br>call, apply中，this被绑定在指定的对象<br>箭头函数中，this指向的是函数定义时作用域的this</p></blockquote></li><li><p>原型与原型链</p><p> 4.1 构造函数<br>   ES的构造函数其实就是能创建对象的函数,使用new调用的函数是构造函数，直接调用的则是普通函数</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, job) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  this.age &#x3D; age;</span><br><span class="line">  this.job &#x3D; job;</span><br><span class="line">  this.sayName &#x3D; function() &#123; alert(this.name) &#125; </span><br><span class="line">&#125;</span><br><span class="line">var person1 &#x3D; new Person(&#39;Zaxlct&#39;, 28, &#39;Software Engineer&#39;);</span><br><span class="line">var person2 &#x3D; new Person(&#39;Mick&#39;, 23, &#39;Doctor&#39;);</span><br></pre></td></tr></table></figure><p>   person1和person2都是person的实例，这两个实例都有一个<i style="color: red">constructor</i>(即构造函数)，该属性指向Person,换句话说就是实例的构造函数属性指向构造函数<br>   其实person1和person2也是Object的实例，因为所有自定义对象都是继承于Object</p><p>   constructor其实是用来标识对象类型的，但实际上一般使用instanceof来确定对象类型，所以如下表达式成立</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(person1.constructor &#x3D;&#x3D; Person); &#x2F;&#x2F;true</span><br><span class="line">console.log(person2.constructor &#x3D;&#x3D; Person); &#x2F;&#x2F;true</span><br><span class="line">console.log(person1 instanceof Object); &#x2F;&#x2F; true</span><br><span class="line">console.log(person1 instanceof Person)  &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p> 4.2 原型对象<br>   js中每定义一个对象（函数也是对象）时，对象中都会包含一些预先定义的属性，当定义函数对象时，就会被包含prototype属性，该属性指向函数的原型对象<br>   Object.getPrototypeOf() 可以获得传入对象的原型对象</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;&#125;</span><br><span class="line">Person.prototype.name &#x3D; &#39;Zaxlct&#39;;</span><br><span class="line">Person.prototype.age  &#x3D; 28;</span><br><span class="line">Person.prototype.job  &#x3D; &#39;Software Engineer&#39;;</span><br><span class="line">Person.prototype.sayName &#x3D; function() &#123;</span><br><span class="line">  alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">var person1 &#x3D; new Person();</span><br><span class="line">person1.sayName(); &#x2F;&#x2F; &#39;Zaxlct&#39;</span><br><span class="line"></span><br><span class="line">var person2 &#x3D; new Person();</span><br><span class="line">person2.sayName(); &#x2F;&#x2F; &#39;Zaxlct&#39;</span><br><span class="line"></span><br><span class="line">console.log(person1.sayName &#x3D;&#x3D; person2.sayName); &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>   <strong>每个对象都有__proto__属性，只有函数对象才有prototype属性， 但是Function.prototype除外</strong><br>   那什么是原型对象呢？看如下代码(<i style="color: #f90">Person.prototype指向原型对象</i>)</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype &#x3D; &#123;</span><br><span class="line">  name:  &#39;Zaxlct&#39;,</span><br><span class="line">  age: 28,</span><br><span class="line">  job: &#39;Software Engineer&#39;,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   原型对象其实就是一个普通对象，其实就是Person.prototype,甚至可以给其赋值 var a = Person.prototype,上述代码中给a添加四个属性name、age、job、sayName,但其实还有一个默认属性construcor</p><ul><li><p>默认情况下，所有原型对象都会有一个构造函数（constructor）属性,这个属性指向prototype所在的函数（Person），并且这个元素是个指针，即 <i style="color: #f90">Person.prototype.constructor == Person</i></p></li><li><p>从之前的结论可以知道实例的构造函数指向构造函数， 即 <i style="color: #90">person1.constructor == Person</i></p></li><li><p>换句话说，Person.prototype也是Person的实例(有待考证)，即<i style="color: #f90">原型对象是构造函数的一个实例</i></p></li><li><p>实例只有指向原型的指针，没有指向构造函数的指针</p></li><li><p>重写构造函数的原型之后，在创建的实例才会引用新的原型</p><p>4.3 <strong>proto</strong><br>js在创建对象的时候都有一个叫做<i style="color: #f90"><strong>proto</strong></i>的内置属性，用于指向创建他的构造函数的原型对象</p><blockquote><p>person1.<strong>proto</strong>== Person.prototype</p></blockquote><p>4.4 构造器<br>我们可以使用 var obj = {}来创建一个对象，等同于var obj = new Object(),所以</p><blockquote><p>obj.constructor == Object<br>obj.<strong>proto</strong> == Object.prototype</p></blockquote><p>同理，创建对象的构造器不只是Object,也可以是Array,Date,Function等<br>这些构造器都是函数对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var b &#x3D; new Array();</span><br><span class="line">b.constructor &#x3D;&#x3D;&#x3D; Array;</span><br><span class="line">b.__proto__ &#x3D;&#x3D;&#x3D; Array.prototype;</span><br><span class="line"></span><br><span class="line">var c &#x3D; new Date(); </span><br><span class="line">c.constructor &#x3D;&#x3D;&#x3D; Date;</span><br><span class="line">c.__proto__ &#x3D;&#x3D;&#x3D; Date.prototype;</span><br><span class="line"></span><br><span class="line">var d &#x3D; new Function();</span><br><span class="line">d.constructor &#x3D;&#x3D;&#x3D; Function;</span><br><span class="line">d.__proto__ &#x3D;&#x3D;&#x3D; Function.prototype;</span><br></pre></td></tr></table></figure><p><strong>所有函数对象的_proto_都指向Function.prototype，它是一个空函数（Empty function）</strong><br><strong>所有对象的_proto_都指向其构造器的prototype</strong><br>4.5 原型链</p></li><li><p>person1.<strong>proto</strong> = Person.prototype   </p><blockquote><p>person1的_proto_等于person1构造函数的prototype<br>person1.constructor == Person</p></blockquote></li><li><p>Person.<strong>proto</strong> = Function.ptototype</p><blockquote><p>Person._proto_等于Person.constructor的prototype，<br>Person.constructor = Function</p></blockquote></li><li><p>Person.prototype.<strong>proto</strong>  = Object.prototype</p><blockquote><p>Person.prototype是一个普通对象，即Object.prototype</p></blockquote></li><li><p>Object.<strong>proto</strong>  = Function.prototype</p><blockquote><p>object的构造函数是Function</p></blockquote></li><li><p>Object.prototype.<strong>proto</strong>  = null</p><blockquote><p>Object.prototype 对象也有proto属性,为null,因为他处于原型链的顶端</p></blockquote><p>4.6 函数对象<br>所有函数对象的_proto_（即所有的构造器）都指向Function.prototype，换句话说所有函数对象的构造函数都是Function<br>所有构造器都继承Function.prototype的属性及方法</p><blockquote><p>Function.prototype是唯一一个 <i style="color: #f90">typeof Function.prototype == Function</i>的prototype<br>其他构造器的prototype都是object<br>普通对象.<strong>proto</strong> = Function.ptototype<br>Function.prototype.<strong>proto</strong> === Object.prototype<br>Object.prototype.<strong>proto</strong> === null</p></blockquote><p>4.7 原型链案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;&#125;</span><br><span class="line">var person1 &#x3D; new Person()</span><br><span class="line">person1.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype</span><br><span class="line">Person.__proto__ &#x3D;&#x3D; Function.prototype            &#x2F;&#x2F; 所有函数对象的__proto__都指向Function.prototype</span><br><span class="line">Person.prototype._proto_ &#x3D;&#x3D; Object.prototype</span><br><span class="line"></span><br><span class="line">Function.__proto__ &#x3D;&#x3D; Function.prototype          &#x2F;&#x2F; Function也属于函数对象</span><br><span class="line">Function.prototype.__proto__ &#x3D;&#x3D; Object.prototype</span><br><span class="line">Object.prototype.__proto__&#x3D;&#x3D; null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var num &#x3D; new Array()</span><br><span class="line">num.__proto__ &#x3D;&#x3D; Array.prototype</span><br><span class="line">Array.prototype.__proto__ &#x3D;&#x3D; Object.prototype</span><br><span class="line">Object.prototype.__proto__ &#x3D;&#x3D; null</span><br><span class="line">Array.__proto__ &#x3D; Function.prototype</span><br></pre></td></tr></table></figure><p>4.8 hasOwnProperty、in、for in的用法</p><blockquote><p>hasOwnProperty() 方法用于确定某个属性是否存在于实例中，存在则返回true<br>in 可以确定某属性是否存在于原型或实例上，只要存在就返回true<br>因此只要hasOwnProperty()返回false, in 返回true,就说明该属性是原型属性<br>在 for-in 循环中使用 in 操作符时，可以通过对象访问且可以被枚举的属性都会返回，包括实例属性和原型属性<br>获得对象上所有可枚举的实例属性，使用<i style="background: #f90">Object.keys(obj)</i><br>列出所有实例属性（包含不可枚举的）可使用<i style="background: #f90">Object.getOwnPropertyNames()</i></p></blockquote><p>4.9 ES2017新增Object.values()和Object.entries()</p><blockquote><p>Object.value()返回对象值的数组<br>Object.entries()返回对象键值对的数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const o &#x3D; &#123;</span><br><span class="line">  foo: &#39;bar&#39;</span><br><span class="line">  ,</span><br><span class="line">  baz: 1,</span><br><span class="line">  qux: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(Object.values(o));    &#x2F;&#x2F; [&quot;bar&quot;, 1, &#123;&#125;]</span><br><span class="line">console.log(Object.entries((o)));   &#x2F;&#x2F; [[&quot;foo&quot;,&quot;bar&quot;], [&quot;baz&quot;, 1], [&quot;qux&quot;, &#123;&#125;]]</span><br></pre></td></tr></table></figure><p>4.10 原型链的问题</p></li><li><p>原型中包含的引用值会在所有实例间共享</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function SuperType() &#123;</span><br><span class="line">  this.colors &#x3D; [&quot;red&quot; , &quot;blue&quot; , &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">function SubType() &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; 继承SuperType</span><br><span class="line">SubType.prototype &#x3D; new SuperType();</span><br><span class="line">let instance1 &#x3D; new SubType();</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">console.log(instance1.colors); &#x2F;&#x2F; &quot;red,blue,green,black&quot;</span><br><span class="line">let instance2 &#x3D; new SubType();</span><br><span class="line">console.log(instance2.colors); &#x2F;&#x2F; &quot;red,blue,green,black&quot;</span><br></pre></td></tr></table></figure></li><li><p>子类型在实例化时不能给父类型的构造函数传参</p><p>4.11 盗用构造函数<br>为解决原型包含引用值导致的继承问题，“盗用构造函数”流行了起来，也叫“对象伪装”，“经典继承”<br>基本思路：在子类构造函数中通过call/apply调用父类构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function SuperType() &#123;</span><br><span class="line">  this.colors &#x3D; [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">function SubType() &#123;</span><br><span class="line">  &#x2F;&#x2F; 继承SuperType</span><br><span class="line">  SuperType.call(this);</span><br><span class="line">&#125;</span><br><span class="line">let instance1 &#x3D; new SubType();</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">console.log(instance1.colors); &#x2F;&#x2F; &quot;red,blue,green,black&quot;</span><br><span class="line">let instance2 &#x3D; new SubType();</span><br><span class="line">console.log(instance2.colors); &#x2F;&#x2F; &quot;red,blue,green&quot;</span><br></pre></td></tr></table></figure><blockquote><p>优点：在子类构造函数中向父类构造函数传参<br>存在的问题：必须在构造函数中定义方法，因此函数不能重用</p></blockquote></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件执行机制（EventLoop）</title>
      <link href="/blog/2021/01/23/jsEventLoop/"/>
      <url>/blog/2021/01/23/jsEventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>javascript是一门单线程语言，js任务是一个一个顺序执行，分为同步任务和异步任务，同步任务会进入主线程，异步任务会进入Event Table（事件表），当时间表中的异步任务完成后就会在Event Queue（事件队列）中注册回调函数，主线程任务全部完成后，才会执行Event Queue中的回调，js解析器会不断重复检查主线程执行栈是否为空，然后重复第3步，这就是Event Loop（事件循环）</p><p><img src="EventLoop.png" alt="123"></p><p><strong>简单来说就是：</strong><br>  先同步后异步<br>  遇到new Promise先执行<br>  先微任务后宏任务</p><h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval, setImmediate（浏览器暂时不支持，只有IE10支持，具体可见MDN）、I/O、UI Rendering。<br>micro-task(微任务)：Promise.then，process.nextTick</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>一般的JavaScript代码（同步）的属于宏任务，定时器相关的异步代码，包括setTimeOut、setInterval等也属于宏任务，promise.then、 process.nextTick属于微任务；</li><li>同步的代码会按照执行顺序顺序执行，遇到异步代码的时候，属于宏任务的放到宏队列，微任务放到微队列，其中promise需要resolve或者reject才会执行then或者catch里面的内容，其他的放到队列的属于回调函数的内容。</li><li>执行顺序是宏任务-微任务-宏任务……，因为整个脚本就是一个宏任务，所以当里面宏任务和微任务同时放入队列，会先执行玩微任务再执行宏任务；前提是代码执行完毕，如果存在嵌套关系，则会先执行完该任务再执行下一个任务，如果问题复杂建议通过画图来理清楚</li><li>process.nextTick只能在node环境下运行</li></ol><h2 id="async-await-与-Promise"><a href="#async-await-与-Promise" class="headerlink" title="async await 与 Promise"></a>async await 与 Promise</h2><ol><li>async声明的必须是一个function，并且必须紧跟着function </li></ol><p>async function process() {<br>}</p><ol start="2"><li>await必须在async声明的函数内部使用，必须是直系</li><li>async生命的函数本质上是一个Promise</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下三个函数表达的意思一致</span><br><span class="line">const demo &#x3D;(async function() &#123;                                              </span><br><span class="line">  return &#39;我是promise&#39;                  </span><br><span class="line">&#125;) ()                                                                                           </span><br><span class="line"></span><br><span class="line">const demo &#x3D; (async function() &#123;</span><br><span class="line">  return Promise.resolve(&#39;我是promise&#39;)   </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">const demo &#x3D;（async function() &#123;</span><br><span class="line">  return new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;我是promise&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br><span class="line">&#x2F;&#x2F; 获取返回值的方法</span><br><span class="line">demo.then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>await的本质是提供等同于“同步效果”的等待异步返回能力的语法糖，实质上就是返回一个Promise</li><li>await意为等一会，只要await生命的函数还没有返回，下面的内容就不会被执行，准确的说是用await声明的Promise异步返回，必须等待到有返回值之后，才继续执行以后的代码</li></ol><p><img src="async1.png"></p><ol><li>async/await的错误处理</li></ol><p><img src="async2.png"><br><img src="async3.png"></p><ol><li>async/await的终止程序（中断）  </li></ol><p><img src="async4.png"></p><ul><li>Promise本身是无法终止的，只是一个状态机，包含三种状态pending（挂起）、resolve（成功）、reject（拒绝），一旦发出请求必须结束，无法取消，想要中断的时候直接return 一个值即可，return之后的操作将都会停止</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome跨域请求携带cookie丢失问题(80版本之后)</title>
      <link href="/blog/2020/04/30/chromeProblem/"/>
      <url>/blog/2020/04/30/chromeProblem/</url>
      
        <content type="html"><![CDATA[<h2 id="针对测试环境的解决方法"><a href="#针对测试环境的解决方法" class="headerlink" title="针对测试环境的解决方法"></a>针对测试环境的解决方法</h2><ul><li>打开chrome 输入 chrome://flags/   </li><li>搜索 SameSite by default cookies 以及  Cookies without SameSite must be secure</li><li>将两项都修改为Disabled</li><li>点击relaunch重新加载</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210330135845.png"></p><h2 id="针对正式"><a href="#针对正式" class="headerlink" title="针对正式"></a>针对正式</h2><ul><li>拒绝使用跨域的cookie</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>indexedDB使用方法</title>
      <link href="/blog/2020/04/06/indexedDB/"/>
      <url>/blog/2020/04/06/indexedDB/</url>
      
        <content type="html"><![CDATA[<h2 id="使用IndexedDB的原因"><a href="#使用IndexedDB的原因" class="headerlink" title="使用IndexedDB的原因"></a>使用IndexedDB的原因</h2><p>提到为什么要用IndexedDB就不得不提到我们经常用的缓存API localStorage和sessionStorage，这两个缓存API能满足我们开发时的绝大多数需求，简单的键值存储，但是它们有它们的限制：</p><p>存储空间限制，只有5M<br>只能存储字符串，存储对象类型的数据要用JSON.stringify和parse两个方法转换<br>存储的字段一多就很难管理，存储的字段也无法产生关联<br>IndexedDB的存储空间是没有限制，但是不同浏览器可能会对IndexedDB中单个库的大小进行一定的限制，IndexedDB本质上还是一个数据库，可以存储大量结构化数据（包括文件/blobs）, 同时IndexedDB API通过索引的方式实现了数据的高性能搜索</p><h2 id="打开数据库-新建数据库"><a href="#打开数据库-新建数据库" class="headerlink" title="打开数据库/新建数据库"></a>打开数据库/新建数据库</h2><p><strong>indexedDB.open(dbName, version)</strong></p><ul><li>参数1：数据库名称（如果数据库不存在，则会新建）</li><li>参数2: 数据库版本（若省略，则默认为当前版本，新建数据库时，默认为1）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open([dataBaseName])</span><br><span class="line">&lt;!-- error 表示数据库打开失败 --&gt;</span><br><span class="line">routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开失败&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- success 表示数据库打开成功 --&gt;</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded --&gt;</span><br><span class="line">request.onupgradeneeded &#x3D; function (event) &#123;</span><br><span class="line">  db &#x3D; event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p><strong>objectStore.get(primaryKey)</strong></p><ul><li>参数：主键的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    db &#x3D; event.target.result</span><br><span class="line">    let trans &#x3D; db.transaction([&#39;allRouteData&#39;])</span><br><span class="line">    let objectStores  &#x3D; trans.objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let request &#x3D; objectStores.get(1)</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">      if(event.target.result) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">        const newRoute &#x3D; []</span><br><span class="line">        newRoute.push(event.target.result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量读取数据"><a href="#批量读取数据" class="headerlink" title="批量读取数据"></a>批量读取数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    let res &#x3D; event.target.result</span><br><span class="line">    if(res) &#123;</span><br><span class="line">        let val &#x3D; res.value</span><br><span class="line">        newRoute.push(val)</span><br><span class="line">        store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">        router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">        res.continue()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#39;完成索引&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p><strong>objectStore.put(item)</strong></p><ul><li>参数：一列数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">const newRoute &#x3D; []</span><br><span class="line">objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123;</span><br><span class="line">    name: &#39;首页&#39;,</span><br><span class="line">    path: &#39;dashboard&#39;,</span><br><span class="line">    component: &#39;Dashboard&#39;,</span><br><span class="line">    id: 2,</span><br><span class="line">    meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p><strong>objectStore.del(num)</strong></p><ul><li>参数：删除的条数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1)</span><br><span class="line">request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据删除成功&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><p><strong>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">objectStore.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;)</span><br></pre></td></tr></table></figure><h2 id="完整测试案例"><a href="#完整测试案例" class="headerlink" title="完整测试案例"></a>完整测试案例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let routerDBRequest &#x3D; window.indexedDB.open(&#39;dataAnalysis&#39;)</span><br><span class="line">&lt;!-- error 表示数据库打开失败 --&gt;</span><br><span class="line">routerDBRequest.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开失败&#39;)</span><br><span class="line">    console.log(event)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- success 表示数据库打开成功 --&gt;</span><br><span class="line">routerDBRequest.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;打开成功&#39;)</span><br><span class="line">    &lt;!-- 读取单条数据 --&gt;</span><br><span class="line">    db &#x3D; event.target.result</span><br><span class="line">    let trans &#x3D; db.transaction([&#39;allRouteData&#39;])</span><br><span class="line">    let objectStores  &#x3D; trans.objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let request &#x3D; objectStores.get(1)  &#x2F;&#x2F; get参数为主键的值</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        const newRoute &#x3D; []</span><br><span class="line">        newRoute.push(event.target.result)</span><br><span class="line">        store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">        router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 批量读取数据 --&gt;</span><br><span class="line">    objectStores.openCursor().onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        let res &#x3D; event.target.result</span><br><span class="line">        if(res) &#123;</span><br><span class="line">            let val &#x3D; res.value</span><br><span class="line">            newRoute.push(val)</span><br><span class="line">            store.dispatch(&#39;dealRouter&#x2F;SaveAllRouter&#39;, newRoute)</span><br><span class="line">            router.push(&#123; path: newRoute[0].path &#125;)</span><br><span class="line">            res.continue()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#39;完成索引&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    const newRoute &#x3D; []</span><br><span class="line">    objectStores.put(&#123;id: 1, name: &#39;首页&#39;, component: &#39;Layout&#39;, path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;dashboard&#39;, meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;, children: [&#123;</span><br><span class="line">    name: &#39;首页&#39;,</span><br><span class="line">    path: &#39;dashboard&#39;,</span><br><span class="line">    component: &#39;Dashboard&#39;,</span><br><span class="line">    id: 2,</span><br><span class="line">    meta:&#39;&#123;&quot;title&quot;:&quot;首页&quot;&#125;&#39;</span><br><span class="line">    &#125;]&#125;)</span><br><span class="line"></span><br><span class="line">    &lt;!-- 删除数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;).del(1)</span><br><span class="line">    request.onsuccess &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;数据删除成功&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- upgradeneeded  数据库升级事件（指定版本大于数据库实际版本时触发） --&gt;</span><br><span class="line">routerDBRequest.onupgradeneeded &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    let db &#x3D; event.target.result</span><br><span class="line"></span><br><span class="line">    &lt;!-- 创建数据仓库&#x2F;新建表 --&gt;</span><br><span class="line">    &lt;!-- allRouteData为表名,keyPath为主键,使用autoIncrement可以自动生成主键 --&gt;</span><br><span class="line">    if(!db.objectStoreNames.contains(&quot;allRouteData&quot;)) &#123;</span><br><span class="line">        let allRoute &#x3D; this.db.createObjectStore(&quot;allRouteData&quot;, &#123; keyPath: &#39;id&#39;&#125;)</span><br><span class="line">        &lt;!-- IDBObject.createIndex()是新建索引的方法， 三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值） --&gt;</span><br><span class="line">        allRoute.createIndex(&#39;id&#39;, &#39;id&#39;, &#123; unique: true &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;name&#39;, &#39;name&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;path&#39;, &#39;path&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;component&#39;, &#39;component&#39;, &#123; unique: false &#125;)</span><br><span class="line">        allRoute.createIndex(&#39;hiddenInMenu&#39;, &#39;hiddenInMenu&#39;, &#123; unique: false&#125;)</span><br><span class="line">        allRoute.createIndex(&#39;redirect&#39;, &#39;redirect&#39;, &#123;unique: false&#125;)</span><br><span class="line">        allRoute.createIndex(&#39;meta&#39;, &#39;meta&#39;, &#123; unique: false&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 写入数据 --&gt;</span><br><span class="line">    var objectStore &#x3D; transaction.objectStore(&quot;allRouteData&quot;)</span><br><span class="line">    let addReq &#x3D; objectStore.add($&#123;data&#125;)</span><br><span class="line">    addReq.onsuccess &#x3D; (event)&#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据写入成功&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    addReq.onerror &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;数据写入失败&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 利用索引检索数据 --&gt;</span><br><span class="line">    let objectStores  &#x3D; db.transaction([&#39;allRouteData&#39;], &#39;readwrite&#39;).objectStore(&#39;allRouteData&#39;)</span><br><span class="line">    let index &#x3D; objectStores.index(&quot;name&quot;)</span><br><span class="line">    index.get(&#39;首页&#39;).onsuccess &#x3D; (event)&#x3D;&gt; &#123;</span><br><span class="line">    console.log(event.target.result)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用picGo存储图片</title>
      <link href="/blog/2020/03/25/picGoc/"/>
      <url>/blog/2020/03/25/picGoc/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>作为一个前端党，没有自己的服务器，所以在开发自己的博客的时候，存放图片是个棘手的问题。一开始我是使用github直接存储的，后来发现这样访问起来会很慢，后来发现了picGo这个工具，可以快速的上传图片到github，并且能获取到图片的url, 可在别的地方使用。PicGo是一个用于快速上传图片并获取图片 URL 链接的工具，配置较为简单，支持多种图床。</p><p>PicGo 本体支持如下图床：</p><ul><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5 版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM. MS V2 v2.3.0-beta.0</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">点击此处可下载官方版</a></p><ul><li>windows用户可下载最新版的exe文件</li><li>macOS 用户请下载最新版本的 dmg 文件</li><li>Linux 用户请下载 AppImage 文件</li></ul><blockquote><p>安装完成打开软件是如下界面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325102424.png" alt="主界面"></p><h2 id="使用github图床"><a href="#使用github图床" class="headerlink" title="使用github图床"></a>使用github图床</h2><blockquote><p>picGo支持的图床有很多，我使用的是github图床，配置较简单，比直接在github中存储图片更加友好</p></blockquote><ol><li><p>首先得注册一个github账号，注册方法应该不用多言，相信大家都已经有了</p></li><li><p>新建一个仓库，并且记下仓库名</p><blockquote><p>最好是设置为公共仓库，私有仓库的话可能在picGo中会出现无法预览已上传图片的问题</p></blockquote></li><li><p>生成一个token, 可以使picGo操作git</p><p> 访问 <a href="https://github.com/settings/tokens%E8%BF%9B%E5%85%A5%E5%88%B0%E8%8E%B7%E5%8F%96token%E9%A1%B5%E9%9D%A2">https://github.com/settings/tokens进入到获取token页面</a></p><p> 然后点击 Generate new token<br> <img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325115235.png"></p><p> 把repo的勾打上即可。然后翻到页面最底部，点击Generate token的绿色按钮生成token。<br> <img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325115234.png"></p><p> <strong>值得注意的是：这个token只会生成一次，所以需要保存下来以供之后使用</strong><br> <img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325115233.png"></p></li><li><p>配置picGo</p><p><strong>注意：</strong>仓库名的格式是 <i>‘用户名/仓库名’</i>, 分支名写main就可以，master是不生效的，token就是刚才保存的token, 存储路径可设可不设，自定义域名可以设置加速上传路径，路径之后拼接 ‘用户名/仓库名@分支’即可，最后就可以点击确定以生效，点击设为默认图床来确保上传的图床是GitHub。</p><p><img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325115913.png"></p><p>配置完成之后就可以上传图片了，上传成功之后，仓库里就会出现新上传的图片了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> image </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo分类和标签页面空白页的问题</title>
      <link href="/blog/2020/02/12/hexoNotice/"/>
      <url>/blog/2020/02/12/hexoNotice/</url>
      
        <content type="html"><![CDATA[<p>使用hexo搭建博客的过程中，分类和标签页面一直是空白的问题困扰了我很久，右侧的标签栏中能够正常显示分类和标签，但是跳转到详情页面却是空白的，后来终于找到了解决方案。</p><ul><li><p>首先要创建分类页面</p><blockquote><p>hexo new page categories<br>执行此命令后，会在source文件夹下生成categories文件夹，里面包含index.md文件</p></blockquote></li><li><p>文章页面中设置<i style="color: red">categories: 分类名</i>，即可将文章归为某分类下</p></li><li><p>编辑categories文件夹下的index.md文件</p><p><strong>代码很简单，值得注意的是layout的值与当前所用的主题中layout文件夹中的文件命名须一致，一开始我写的是 <i style="color: red">layout: categories</i>, 后来发现我使用的主题layout文件夹下是 <i style="color: red">category.ejs</i>，而不是 <i style="color: red">categories.ejs</i>，所以分类无法显示，当layout的值修改为category之后，分类页面便可以显示正常。</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-03-25 15:35:01</span><br><span class="line">type: categories</span><br><span class="line">layout: category</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><p>在主题文件夹中找到_config.yml文件，搜索menu字段，将分类的url设置为 ‘/categories’, 如：</p><p><img src="https://cdn.jsdelivr.net/gh/lizeyu66/blogImage@main/20210325161920.png"></p></li></ul><p>  <strong>标签页面与分类页面同理</strong></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
